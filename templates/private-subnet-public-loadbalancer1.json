{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer. This also launches an EC2 instance using Deep Learning Ubuntu AMI",
	"Parameters": {
		"StackName": {
			"Type": "String",
			"Default": "production",
			"Description": "The name of the parent Fargate networking stack that you created. Necessary\nto locate and reference resources created by that stack."
		},
		"KeyName": {
			"Description": "Name of an existing Amazon EC2 KeyPair to enable SSH access to the instances",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"ServiceName": {
			"Type": "String",
			"Default": "mxnet-model-server-fargate-app",
			"Description": "A name for the service"
		},
		"ImageUrl": {
			"Type": "String",
			"Default": "awsdeeplearningteam/mms_cpu",
			"Description": "The url of a docker image that contains the application process that\nwill handle the traffic for this service"
		},
		"ContainerPort": {
			"Type": "Number",
			"Default": 8080,
			"Description": "What port number the application inside the docker container is binding to"
		},
		"HostPort": {
			"Type": "Number",
			"Default": 8080,
			"Description": "What port number the application inside the docker container is binding to"
		},
		"ContainerCpu": {
			"Type": "Number",
			"Default": 256,
			"Description": "How much CPU to give the container. 1024 is 1 CPU"
		},
		"ContainerMemory": {
			"Type": "Number",
			"Default": 512,
			"Description": "How much memory in megabytes to give the container"
		},
		"Path": {
			"Type": "String",
			"Default": "*",
			"Description": "A path on the public load balancer that this service\nshould be connected to. Use * to send all load balancer\ntraffic to this service."
		},
		"Priority": {
			"Type": "Number",
			"Default": 1,
			"Description": "The priority for the routing rule added to the load balancer.\nThis only applies if your have multiple services which have been\nassigned to different paths on the load balancer."
		},
		"DesiredCount": {
			"Type": "Number",
			"Default": 2,
			"Description": "How many copies of the service task to run"
		},
		"Role": {
			"Type": "String",
			"Default": "",
			"Description": "(Optional) An IAM role to give the service's containers if the code within needs to\naccess other AWS resources like S3 buckets, DynamoDB tables, etc"
		},
		"DeepLearningInstanceType": {
			"Description": "The EC2 instance type for workers.For GPUs choose g2.xx or p2.xx",
			"Type": "String",
			"Default": "p3.2xlarge",
			"AllowedValues": [
				"p2.16xlarge",
				"p2.8xlarge",
				"p2.xlarge",
				"p3.2xlarge",
				"p3.8xlarge",
				"p3.16xlarge",
				"g2.8xlarge",
				"g2.2xlarge",
				"t2.small",
				"t2.medium",
				"t2.large",
				"t2.xlarge",
				"t2.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"m4.16xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"x1.16large",
				"x1.32xlarge",
				"r4.large",
				"r4.xlarge",
				"r4.2xlarge",
				"r4.4xlarge",
				"r4.8xlarge",
				"r4.16xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"d2.xlarge",
				"d2.2xlarge",
				"d2.4xlarge",
				"d2.8xlarge",
				"f1.2xlarge",
				"f1.16xlarge"
			],
			"ConstraintDescription": "Must be a valid CPU optimized or GPU EC2 instance type."
		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Deep Learning Instance configuration"
					},
					"Parameters": [
						"",
						"DeepLearningInstanceType",
						"KeyName"
					]
				},
				{
					"Label": {
						"default": "Task Definition Configuration"
					},
					"Parameters": [
						"StackName",
						"ServiceName",
						"ImageUrl",
						"ContainerCpu",
						"ContainerMemory",
						"ContainerPort",
						"HostPort",
						"DesiredCount",
						"Path",
						"Priority",
						"Role"
					]
				}
			]
		}
	},
	"Conditions": {
		"HasCustomRole": {
			"Fn::Not": [{
				"Fn::Equals": [
					{ "Ref": "Role" },
					""
				]
			}]
		}
	},
	"Mappings": {
		"DeepLearningAMI": {
			"us-east-1": { "AMI": "ami-d1c9cdae" },
			"us-west-2": { "AMI": "ami-18693660" },
			"eu-west-1": { "AMI": "ami-8a392060" },
			"us-east-2": { "AMI": "ami-885a60ed" }
		}
	},
	"Resources": {
		"TaskDefinition": {
			"Type": "AWS::ECS::TaskDefinition",
			"Properties": {
				"Family": { "Ref": "ServiceName" },
				"Cpu": { "Ref": "ContainerCpu" },
				"Memory": { "Ref": "ContainerMemory" },
				"NetworkMode": "awsvpc",
				"RequiresCompatibilities": [
					"FARGATE"
				],
				"ExecutionRoleArn": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "ECSTaskExecutionRole"]] }
				},
				"TaskRoleArn": {
					"Fn::If": [
						"HasCustomRole",
						{ "Ref": "Role" },
						{ "Ref": "AWS::NoValue" }
					]
				},
				"ContainerDefinitions": [{
					"Name": { "Ref": "ServiceName" },
					"Cpu": { "Ref": "ContainerCpu" },
					"Memory": { "Ref": "ContainerMemory" },
					"Image": { "Ref": "ImageUrl" },
					"PortMappings": [{
						"ContainerPort": { "Ref": "ContainerPort" }
					}]
				}]
			}
		},
		"mmsTaskDefinition": {
			"Type": "AWS::ECS::TaskDefinition",
			"DependsOn": "DeepLearningInstance",
			"Properties": {
				"Family": { "Ref": "ServiceName" },
				"Cpu": { "Ref": "ContainerCpu" },
				"Memory": { "Ref": "ContainerMemory" },
				"NetworkMode": "awsvpc",
				"RequiresCompatibilities": [
					"FARGATE"
				],
				"ExecutionRoleArn": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "ECSTaskExecutionRole"]] }
				},
				"TaskRoleArn": {
					"Fn::If": [
						"HasCustomRole",
						{ "Ref": "Role" },
						{ "Ref": "AWS::NoValue" }
					]
				},
				"ContainerDefinitions": [{
					"Name": { "Ref": "ServiceName" },
					"Image": {
						"Fn::Join": ["", [{ "Ref": "AWS::AccountId" },
							".dkr.ecr.",
							{ "Ref": "AWS::Region" },
							".amazonaws.com/", { "Ref": "MyRepository" }, ":latest"
						]]
					},
					"PortMappings": [{
						"ContainerPort": { "Ref": "ContainerPort" },
						"HostPort": { "Ref": "HostPort" },
						"Protocol": "tcp"
					}],
					"Essential": true,
					"EntryPoint": [
						"mxnet-model-server", "start", "--mms-config", "/mxnet_model_server/mms_app_cpu.conf"
					]
				}]
			}
		},
		"Service": {
			"Type": "AWS::ECS::Service",
			"DependsOn": "LoadBalancerRule",
			"Properties": {
				"ServiceName": { "Ref": "ServiceName" },
				"Cluster": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "ClusterName"]] }
				},
				"LaunchType": "FARGATE",
				"DeploymentConfiguration": {
					"MaximumPercent": 200,
					"MinimumHealthyPercent": 75
				},
				"DesiredCount": { "Ref": "DesiredCount" },
				"NetworkConfiguration": {
					"AwsvpcConfiguration": {
						"SecurityGroups": [{
							"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "FargateContainerSecurityGroup"]] }
						}],
						"Subnets": [{
								"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "PrivateSubnetOne"]] }
							},
							{
								"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "PrivateSubnetTwo"]] }
							}
						]
					}
				},
				"TaskDefinition": { "Ref": "mmsTaskDefinition" },
				"LoadBalancers": [{
					"ContainerName": { "Ref": "ServiceName" },
					"ContainerPort": { "Ref": "ContainerPort" },
					"TargetGroupArn": { "Ref": "TargetGroup" }
				}]
			}
		},
		"TargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 6,
				"HealthCheckPath": "/",
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"TargetType": "ip",
				"Name": { "Ref": "ServiceName" },
				"Port": { "Ref": "ContainerPort" },
				"Protocol": "HTTP",
				"UnhealthyThresholdCount": 2,
				"VpcId": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "VPCId"]] }
				}
			}
		},
		"LoadBalancerRule": {
			"Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties": {
				"Actions": [{
					"TargetGroupArn": { "Ref": "TargetGroup" },
					"Type": "forward"
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [
						{ "Ref": "Path" }
					]
				}],
				"ListenerArn": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "PublicListener"]] }
				},
				"Priority": { "Ref": "Priority" }
			}
		},
		"DeepLearningInstance": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "MyRepository"
			"Properties": {
				"ImageId": { "Fn::FindInMap": ["DeepLearningAMI", { "Ref": "AWS::Region" }, "AMI"] },
				"KeyName": { "Ref": "KeyName" },
				"InstanceType": { "Ref": "DeepLearningInstanceType" },
				"SecurityGroupIds": [{ "Ref": "DeepLearningSG" }],
				"SubnetId": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "PublicSubnetOne"]] }
				},
				"IamInstanceProfile": { "Ref": "DLInstanceProfile" },
				"Tags": [{
					"Key": "Name",
					"Value": "DeepLearningInstance"
				}, {
					"Key": "Project",
					"Value": "VisualSearch_MXNetWorkshop"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash -xe\n",
							"apt-get update && apt-get install -y git \n",

							"# Install the files and packages from the metadata\n",
							"/opt/aws/bin/cfn-init ",
							"         --stack ", { "Ref": "AWS::StackName" },
							"         --resource DeepLearningInstance ", ^ M "         --configsets InstallAndRun ",
							"         --region ", { "Ref": "AWS::Region" }, "\n",

							"cd /opt \n"
							"git clone https://github.com/gaonkarr/VisualSearch_MXNet_CFN.git\n",
							"apt install docker.io\n",
							"aws ecr get-login --region ", { "Ref": "AWS::Region" }, "\n",
							"docker tag ", { "Ref": "MyRepository" }, ":latest ", { "Ref": "AWS::AccountId" }, ".dkr.ecr.", { "Ref": "AWS::Region" }, ".amazonaws.com/", { "Ref": "MyRepository" }, ":latest", "\n",
							"docker push ", { "Ref": "AWS::AccountId" }, ".dkr.ecr.", { "Ref": "AWS::Region" }, ".amazonaws.com/", { "Ref": "MyRepository" }, ":latest", "\n",

							"# Signal the status from cfn-init\n",
							"/opt/aws/bin/cfn-signal -e $? ",
							"         --stack ", { "Ref": "AWS::StackName" },
							"         --resource DeepLearningInstance ",
							"         --region ", { "Ref": "AWS::Region" }, "\n"
						]]
					}
				}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT5M"
				}
			}
		},
		"DeepLearningSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Access to the public facing deep learning instance ",
				"VpcId": {
					"Fn::ImportValue": { "Fn::Join": [":", [{ "Ref": "StackName" }, "VPCId"]] }
				},
				"SecurityGroupIngress": [{
					"CidrIp": "0.0.0.0/0",
					"IpProtocol": -1
				}]
			}
		},
		"DLRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "AmazonEC2ContainerRegistryFullAccess",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ecr:*",
								"cloudtrail:LookupEvents"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"DLInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "DLRole"
				}]
			}
		},

		"MyRepository": {
			"Type": "AWS::ECR::Repository",
			"Properties": {
				"RepositoryName": "mms-repo",
				"RepositoryPolicyText": {
					"Version": "2008-10-17",
					"Statement": [{
						"Sid": "AllowPushPull",
						"Effect": "Allow",
						"Principal": {
							"AWS": [
								"*"
							]
						},
						"Action": [
							"ecr:GetDownloadUrlForLayer",
							"ecr:BatchGetImage",
							"ecr:BatchCheckLayerAvailability",
							"ecr:PutImage",
							"ecr:InitiateLayerUpload",
							"ecr:UploadLayerPart",
							"ecr:CompleteLayerUpload"
						]
					}]
				}
			}
		}
	},
	"Outputs": {
		"DeepLearningInstancePublicIP": {
			"Description": "The IP of the Deep Learning Instance",
			"Value": { "Fn::GetAtt": ["DeepLearningInstance", "PublicIp"] }
		},
		"RepositoryARN": {
			"Description": "ARN of ECR Repository",
			"Value": { "Fn::GetAtt": ["MyRepository", "Arn"] }
		}
	}
}
